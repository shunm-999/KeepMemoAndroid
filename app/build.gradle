plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.keepmemo"
        minSdk 21
        targetSdk 31
        versionCode version_code
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        debug {
            storeFile = file("../debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("keystore/upload-keystore.jks")
            }

            storeFile = file("keystore/upload-keystore.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.core.get()
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
}

configurations {
    ktlint
}

dependencies {

    implementation libs.bundles.compose.accompanist

    implementation libs.androidx.core
    implementation libs.bundles.compose.core
    implementation libs.bundles.androidx.lifecycle
    implementation libs.compose.navigation
    implementation libs.androidx.paging.runtime
    implementation libs.compose.paging
    implementation libs.compose.coil

    implementation libs.room.runtime
    implementation libs.room.ktx
    annotationProcessor libs.room.compiler
    kapt libs.room.compiler

    implementation libs.hilt.android
    implementation libs.hilt.navigation
    kapt libs.hilt.compiler
    ktlint libs.ktlint.pinterest
    implementation libs.timber

    testImplementation libs.bundles.unit.test
    kaptTest libs.hilt.testing.compiler

    androidTestImplementation libs.bundles.android.test
    debugImplementation libs.compose.test.ui.tooling
}

// ktlint settings
task ktlintCheck(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "android", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlint/ktlint-result.xml"
    ignoreExitValue true
}
check.dependsOn ktlintCheck

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt", "android", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlintFotmat/ktlint-format-result.xml"
    ignoreExitValue true
}